/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/public.es6":
/*!***************************!*\
  !*** ./src/js/public.es6 ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scrollSpot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scrollSpot */ \"./src/js/scrollSpot.js\");\n/* global DaReactions */\r\n\r\n\r\n\r\n/**\r\n * Global plugin options object\r\n *\r\n * @type {*|{ajax_url: string}}\r\n *\r\n * @since 1.0.0\r\n */\r\nwindow.DaReactions = {\r\n    ...{\r\n        ajax_url: '',\r\n        display_detail_modal: 'off',\r\n        display_detail_modal_toolbar: 'off',\r\n        display_detail_tooltip: 'off',\r\n        display_name: '',\r\n        emotion_id: 0,\r\n        labels: {\r\n            modal_no_tabs_title: 'Reactions',\r\n            modal_tab_all_title: 'All reactions',\r\n            modal_pagination_close: '×',\r\n            modal_pagination_next: '→',\r\n            modal_pagination_prev: '←',\r\n            modal_pagination_desc: 'Page %d of %d'\r\n        },\r\n        loader_url: '',\r\n        modal_result_limit: 0,\r\n        nonce: '',\r\n        pagination: {\r\n            index: 0,\r\n            total: 0,\r\n            size: 0\r\n        },\r\n        reactions: [],\r\n        show_count: '',\r\n        tooltip_result_limit: 0,\r\n        user_link: ''\r\n    }, ...DaReactions\r\n};\r\n\r\n(function ($) {\r\n\r\n    /**\r\n     * Callback for click on reaction image to save reaction\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    function clickedReaction() {\r\n        // gets all parameters\r\n        let me = $(this).closest('.da-reactions-data'),\r\n            my_type = $(me).data('type'),\r\n            my_id = $(me).data('id'),\r\n            my_reaction = $(me).data('reaction'),\r\n            my_nonce = $(me).data('nonce') || DaReactions.nonce,\r\n            clicked_image = $(me).find('img'),\r\n            siblings = $('.da-reactions-outer.T' + my_type + 'ID' + my_id),\r\n            outer_container = $(me).closest('.da-reactions-outer'),\r\n            before_reveal_container = $(outer_container).find('.before-reveal'),\r\n            target_image = before_reveal_container.find('img'),\r\n            target_total_count = before_reveal_container.find('.count');\r\n\r\n        const current_image_src = target_image.attr('src');\r\n        target_image.attr('src', DaReactions.loader_url);\r\n\r\n        removeFromCache('clickedCount', my_type, my_id);\r\n        removeFromCache('mouseOverCount', my_type, my_id);\r\n\r\n        // calls ajax service\r\n        $.ajax({\r\n            url: DaReactions.ajax_url,\r\n            method: 'post',\r\n            cache: false,\r\n            data: {\r\n                'action': 'da_reactions_add_reaction',\r\n                'id': my_id,\r\n                'nonce': my_nonce,\r\n                'reaction': my_reaction,\r\n                'type': my_type\r\n            },\r\n            success: function (result) {\r\n                if (result.success === 'ok') {\r\n                    removeFromCache('mouseOverCount', my_type, my_id)\r\n                    // update classes and labels\r\n                    $(siblings).each(function () {\r\n                        let before_reveal_container = $(this).find('.before-reveal');\r\n                        let target_image = before_reveal_container.find('img');\r\n                        let foundCurrent = false;\r\n                        let totalScore = 0;\r\n                        if (target_image.length) {\r\n                            target_image.attr('src', clicked_image.attr('src'));\r\n                        }\r\n                        let showCount = DaReactions.show_count;\r\n                        if ($('select#show_count').length) {\r\n                            showCount = $('select#show_count').val();\r\n                        }\r\n                        const showCountBeforeReveal = {\r\n                            'always': 'always',\r\n                            'percentage': 'always',\r\n                            'non-zero': 'non-zero',\r\n                            'percentage-non-zero': 'non-zero',\r\n                            'never': 'never'\r\n                        }[showCount] || 'never';\r\n                        for (let a in result['reactions']) {\r\n                            if (result['reactions'].hasOwnProperty(a)) {\r\n                                let $ico = $(this).find('.reaction.reaction_' + result['reactions'][a]['ID']);\r\n                                if (result['reactions'][a]['current']) {\r\n                                    foundCurrent = true;\r\n                                    $ico.addClass('active');\r\n                                    $ico.removeClass('inactive');\r\n                                } else {\r\n                                    $ico.removeClass('active');\r\n                                    $ico.addClass('inactive');\r\n                                }\r\n                                const reactionCount = result['reactions'][a]['total'] || 0;\r\n                                const reactionPercentage = Math.round(+result['reactions'][a]['percentage'] || 0) + '%';\r\n                                const $countBadge = $ico.find('.count');\r\n\r\n                                switch (showCount) {\r\n                                    case 'always':\r\n                                        $countBadge.attr('data-value', numberFormatter(reactionCount));\r\n                                        $countBadge.show();\r\n                                        break;\r\n                                    case 'percentage':\r\n                                        $countBadge.attr('data-value', reactionPercentage);\r\n                                        $countBadge.show();\r\n                                        break;\r\n                                    case 'non-zero':\r\n                                        $countBadge.attr('data-value', numberFormatter(reactionCount));\r\n                                        if (reactionCount > 0) {\r\n                                            $countBadge.show();\r\n                                        } else {\r\n                                            $countBadge.hide();\r\n                                        }\r\n                                        break;\r\n                                    case 'percentage-non-zero':\r\n                                        if (reactionPercentage !== '0%') {\r\n                                            $countBadge.show();\r\n                                        } else {\r\n                                            $countBadge.hide();\r\n                                        }\r\n                                        $countBadge.attr('data-value', reactionPercentage);\r\n                                        break;\r\n                                    case 'never':\r\n                                        $countBadge.hide();\r\n                                        break;\r\n                                }\r\n                                totalScore += +result['reactions'][a]['total'];\r\n                            }\r\n                        }\r\n                        switch (showCountBeforeReveal) {\r\n                            case 'always':\r\n                                target_total_count.attr('data-value', numberFormatter(totalScore));\r\n                                target_total_count.show();\r\n                                break;\r\n                            case 'non-zero':\r\n                                if (String(totalScore)[0] === '0') {\r\n                                    target_total_count.hide();\r\n                                } else {\r\n                                    target_total_count.attr('data-value', numberFormatter(totalScore));\r\n                                }\r\n                                break;\r\n                            case 'never':\r\n                                target_total_count.hide();\r\n                                break;\r\n                        }\r\n                        if (foundCurrent) {\r\n                            $(this).closest('.da-reactions-container').addClass('has_current');\r\n                        } else {\r\n                            $(this).closest('.da-reactions-container').removeClass('has_current');\r\n                        }\r\n                    });\r\n                } else {\r\n                    alertWindow(result.message);\r\n                }\r\n            },\r\n            error: () => {\r\n                target_image.attr('src', current_image_src);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggle visibility of widget on small screen devices\r\n     *\r\n     * @param event\r\n     *\r\n     * @since 2.0.4\r\n     */\r\n    function clickedToggle(event) {\r\n        event.stopPropagation();\r\n        $(this).parent().toggleClass('open');\r\n    }\r\n\r\n    /**\r\n     * Callback for click on count badge, opens details modal\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function clickedCount(e) {\r\n        const me = e.target;\r\n        e.preventDefault();\r\n        removeUserTooltip();\r\n        let my_container = $(me).closest('.da-reactions-data, .da-reactions-container-async.gutenberg-block'),\r\n            my_type = $(my_container).data('type'),\r\n            my_id = $(my_container).data('id'),\r\n            my_nonce = $(my_container).data('nonce') || DaReactions.nonce,\r\n            my_reaction = $(me).data('reaction') || $(my_container).data('reaction') || 0,\r\n            pageNum = $(me).data('pageNum') || 0,\r\n            result = loadFromCache('clickedCount', my_type, my_id, my_reaction, pageNum);\r\n        let data = {\r\n            'action': 'da_reactions_get_users_reactions',\r\n            'type': my_type,\r\n            'id': my_id,\r\n            'nonce': my_nonce,\r\n            'reaction': my_reaction,\r\n            'pageNum': pageNum,\r\n            'limit': parseInt(DaReactions.modal_result_limit, 10)\r\n        };\r\n        if (!result || result.success !== 'ok') {\r\n            $.ajax({\r\n                url: DaReactions.ajax_url,\r\n                method: 'post',\r\n                cache: false,\r\n                data,\r\n                success: function (result) {\r\n                    saveToCache('clickedCount', my_type, my_id, my_reaction, result, pageNum);\r\n                    if (result.success && result.success === 'ok') {\r\n                        showUsersModal(result, data);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            showUsersModal(result, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param prefix\r\n     * @param my_type\r\n     * @param my_id\r\n     * @param my_reaction\r\n     * @param page\r\n     */\r\n    function initDaReactionsCache(prefix, my_type, my_id, my_reaction, page) {\r\n        DaReactions.cache = DaReactions.cache || {};\r\n        DaReactions.cache[prefix] = DaReactions.cache[prefix] || {};\r\n        DaReactions.cache[prefix][my_type] = DaReactions.cache[prefix][my_type] || {};\r\n        DaReactions.cache[prefix][my_type][my_id] = DaReactions.cache[prefix][my_type][my_id] || {};\r\n        DaReactions.cache[prefix][my_type][my_id][my_reaction] = DaReactions.cache[prefix][my_type][my_id][my_reaction] || {};\r\n        DaReactions.cache[prefix][my_type][my_id][my_reaction][page] = DaReactions.cache[prefix][my_type][my_id][my_reaction][page] || {};\r\n    }\r\n\r\n    /**\r\n     * Retrieve cached object to avoid redundant server requests\r\n     *\r\n     * @param prefix\r\n     * @param my_type\r\n     * @param my_id\r\n     * @param my_reaction\r\n     * @param page\r\n     * @returns {{success: string}|*}\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function loadFromCache(prefix, my_type, my_id, my_reaction, page) {\r\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, page);\r\n\r\n        if (DaReactions.cache[prefix][my_type][my_id][my_reaction][page].hasOwnProperty('success') && DaReactions.cache[prefix][my_type][my_id][my_reaction][page].success === 'ok') {\r\n            return DaReactions.cache[prefix][my_type][my_id][my_reaction][page];\r\n        }\r\n\r\n        return {\r\n            success: 'no'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Remove cached value\r\n     *\r\n     * @param prefix\r\n     * @param my_type\r\n     * @param my_id\r\n     * @param my_reaction\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function removeFromCache(prefix = '', my_type = '', my_id = 0, my_reaction = 0) {\r\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, 0);\r\n        if (!!prefix) {\r\n            if (!!my_type) {\r\n                if (!!my_id) {\r\n                    if (!!my_reaction) {\r\n                        delete DaReactions.cache[prefix][my_type][my_id][my_reaction];\r\n                    } else {\r\n                        delete DaReactions.cache[prefix][my_type][my_id];\r\n                    }\r\n                } else {\r\n                    delete DaReactions.cache[prefix][my_type];\r\n                }\r\n            } else {\r\n                delete DaReactions.cache[prefix];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save value on local cache\r\n     *\r\n     * @param prefix\r\n     * @param my_type\r\n     * @param my_id\r\n     * @param my_reaction\r\n     * @param value\r\n     * @param page\r\n     * @since 3.0.0\r\n     */\r\n    function saveToCache(prefix, my_type, my_id, my_reaction, value, page) {\r\n        initDaReactionsCache(prefix, my_type, my_id, my_reaction, page);\r\n        DaReactions.cache[prefix][my_type][my_id][my_reaction][page] = value;\r\n    }\r\n\r\n    /**\r\n     * Display a modal popup with users and reactions list\r\n     *\r\n     * @param userReactions\r\n     * @param requestData\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function showUsersModal(userReactions, requestData) {\r\n        removeUsersModal();\r\n        if (!userReactions.reactions.length) {\r\n            return;\r\n        }\r\n        let $modal_background = $('<div>')\r\n            .attr('id', 'da-reactions-users-modal-background');\r\n        let $modal = $('<div>')\r\n            .addClass('da-reactions-data')\r\n            .data('type', requestData.type)\r\n            .data('id', requestData.id)\r\n            .data('limit', requestData.limit)\r\n            .data('nonce', requestData.nonce)\r\n            .data('reaction', requestData.reaction);\r\n        let activeEmotions = {}\r\n\r\n        $modal_background.append($modal);\r\n\r\n        const $scrollContainer = $('<div>')\r\n            .addClass('scroll-container');\r\n        $modal.append($scrollContainer);\r\n\r\n        for (const userReaction of userReactions.reactions) {\r\n            activeEmotions[userReaction.emotion_id] = {\r\n                image: userReaction.image,\r\n                label: userReaction.label\r\n            }\r\n            const $row = $('<a>')\r\n                .attr('href', userReaction.user_link || 'javascript:;')\r\n                .addClass('da-reactions-users-modal-row')\r\n                .addClass('list')\r\n                .addClass('reaction' + userReaction.emotion_id);\r\n            const $rowImage = $(`<img src=\"${userReaction.image}\" alt=\"${userReaction.label}\">`);\r\n            $row.append($rowImage);\r\n            const $rowLabel = $('<span>')\r\n                .text(userReaction.display_name);\r\n            $row.append($rowLabel);\r\n            $scrollContainer.append($row);\r\n        }\r\n\r\n        if (Array.isArray(userReactions.buttons)) {\r\n            const $tools = $('<div>')\r\n                .addClass('da-reactions-users-modal-row')\r\n                .addClass('tools');\r\n\r\n\r\n            const $emptyButton = $('<div>')\r\n                .addClass('da-reactions-button')\r\n                .addClass('da-reactions-users-modal-toggle')\r\n                .data('reaction', '0');\r\n            if (DaReactions.display_detail_modal_toolbar === 'on') {\r\n                $emptyButton.html(DaReactions.labels.modal_tab_all_title);\r\n            } else {\r\n                $emptyButton.html(DaReactions.labels.modal_no_tabs_title);\r\n            }\r\n            $emptyButton.on('click', clickedCount);\r\n            $tools.append($emptyButton);\r\n\r\n            let foundCurrent = false;\r\n\r\n            if (DaReactions.display_detail_modal_toolbar === 'on') {\r\n                for (const tool of userReactions.buttons) {\r\n                    const $toolButton = $('<div>')\r\n                        .addClass('da-reactions-button')\r\n                        .addClass('da-reactions-users-modal-toggle')\r\n                        .addClass('da-reactions-toggle-reaction' + tool.ID)\r\n                        .data('reaction', tool.ID);\r\n                    const $toolImage = $(`<img src=\"${tool.image}\" alt=\"${tool.label}\">`)\r\n                        .data('reaction', tool.ID);\r\n                    $toolButton.append($toolImage);\r\n                    if (tool.current) {\r\n                        $toolButton.addClass('current');\r\n                        foundCurrent = true;\r\n                    } else {\r\n                        $toolButton.on('click', clickedCount);\r\n                    }\r\n                    $tools.append($toolButton);\r\n                }\r\n            }\r\n\r\n            if (!foundCurrent) {\r\n                $emptyButton.addClass('current');\r\n            }\r\n            $modal.prepend($tools);\r\n        }\r\n\r\n        let pageNum = parseInt(userReactions.pagination.index, 10);\r\n        let pageCount = Math.ceil(userReactions.pagination.total / userReactions.pagination.size);\r\n\r\n        let $paginator = $('<div>')\r\n            .addClass('da-reactions-users-modal-paginator da-reactions-data')\r\n            .data('type', requestData.type)\r\n            .data('id', requestData.id)\r\n            .data('limit', requestData.limit)\r\n            .data('nonce', requestData.nonce)\r\n            .data('reaction', requestData.reaction);\r\n\r\n        if (pageNum > 1) {\r\n            const $prevButton = $('<span>')\r\n                .addClass('da-reactions-users-modal-paginator-back')\r\n                .html(DaReactions.labels.modal_pagination_prev)\r\n                .data('pageNum', pageNum - 1);\r\n            $paginator.append($prevButton);\r\n            $prevButton.on('click', clickedCount);\r\n        }\r\n        const $currentPage = $('<span>')\r\n            .addClass('da-reactions-users-modal-paginator-text')\r\n            .text(\r\n                DaReactions\r\n                    .labels\r\n                    .modal_pagination_desc\r\n                    .replace('{current}', String(pageNum))\r\n                    .replace('{total}', String(pageCount))\r\n            );\r\n        $paginator.append($currentPage);\r\n        if (pageNum < pageCount) {\r\n            const $nextButton = $('<span>')\r\n                .addClass('da-reactions-users-modal-paginator-next')\r\n                .html('&rarr;')\r\n                .data('pageNum', pageNum + 1);\r\n            $paginator.append($nextButton)\r\n            $nextButton.on('click', clickedCount);\r\n        }\r\n\r\n        $paginator.append($('<span>').addClass('spacer'));\r\n\r\n        const $closeButton = $('<span>')\r\n            .addClass('da-reactions-users-modal-paginator-close')\r\n            .text(DaReactions.labels.modal_pagination_close)\r\n            .on('click', removeUsersModal);\r\n        $paginator.append($closeButton);\r\n\r\n        $modal.append($paginator);\r\n\r\n        $('body').append($modal_background);\r\n    }\r\n\r\n    /**\r\n     * Remove modal popup created with showUsersModal\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function removeUsersModal() {\r\n        $('#da-reactions-users-modal-background').remove();\r\n    }\r\n\r\n    /**\r\n     * Display a tooltip with latest user’s reactions\r\n     *\r\n     * @param userReactions\r\n     * @param mouseEvent\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function showUserTooltip(userReactions, mouseEvent) {\r\n        removeUserTooltip();\r\n        if (userReactions && userReactions.length) {\r\n            return;\r\n        }\r\n        let $tooltip = $('<div id=\"da-reactions-users-tooltip\"></div>')\r\n            .css({left: mouseEvent.clientX, top: mouseEvent.clientY - 20});\r\n        let $tooltip_inner = $('<div>');\r\n        $tooltip.append($tooltip_inner);\r\n        let count = 0;\r\n        for (let userReaction of userReactions) {\r\n            count++;\r\n            let $row = $('<div class=\"da-reactions-users-tooltip-row\"></div>');\r\n            $row.append($(`<img src=\"${userReaction.image}\" alt=\"${userReaction.label}\">`));\r\n            $row.append($(`<span>${userReaction.display_name}</span>`));\r\n            $tooltip_inner.append($row);\r\n        }\r\n        $('body').append($tooltip);\r\n    }\r\n\r\n    /**\r\n     * Change coordinates of tooltip created by showUserTooltip to follow mouse\r\n     *\r\n     * @param mouseEvent\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function moveUserTooltip(mouseEvent) {\r\n        $('#da-reactions-users-tooltip')\r\n            .css({left: mouseEvent.clientX, top: mouseEvent.clientY - 20});\r\n    }\r\n\r\n    /**\r\n     * Remove tooltip created by showUserTooltip\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function removeUserTooltip() {\r\n        $('#da-reactions-users-tooltip').html('').remove();\r\n    }\r\n\r\n    /**\r\n     * Callback for mouseover on count badge\r\n     *\r\n     * @param event\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function mouseOverCounter(event) {\r\n        let my_container = $(this).closest('.da-reactions-data, .da-reactions-container-async.gutenberg-block'),\r\n            my_type = $(my_container).data('type'),\r\n            my_id = $(my_container).data('id'),\r\n            my_nonce = $(my_container).data('nonce') || DaReactions.nonce,\r\n            my_reaction = $(my_container).data('reaction') || '',\r\n            result = loadFromCache('mouseOverCount', my_type, my_id, my_reaction, 1),\r\n            data = {\r\n                'action': 'da_reactions_get_users_reactions',\r\n                'type': my_type,\r\n                'id': my_id,\r\n                'nonce': my_nonce,\r\n                'reaction': my_reaction,\r\n                'limit': parseInt(DaReactions.tooltip_result_limit, 10)\r\n            };\r\n\r\n        if (!result || result.success !== 'ok') {\r\n            $.ajax({\r\n                url: DaReactions.ajax_url,\r\n                method: 'post',\r\n                cache: false,\r\n                data,\r\n                success: function (result) {\r\n                    if (result.success === 'ok') {\r\n                        saveToCache('mouseOverCount', my_type, my_id, my_reaction, result, 1);\r\n                        showUserTooltip(result.reactions, event);\r\n                    }\r\n                }\r\n            });\r\n        } else if (result.success === 'ok') {\r\n            showUserTooltip(result.reactions, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for mousemove on count badge\r\n     *\r\n     * @param event\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function mouseMoveCounter(event) {\r\n        if ($(event.target).is('.count')) {\r\n            moveUserTooltip(event);\r\n        } else {\r\n            removeUserTooltip();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for mouseout from count badge\r\n     *\r\n     * @since 3.0.0\r\n     */\r\n    function mouseOutCounter() {\r\n        removeUserTooltip();\r\n    }\r\n\r\n    /**\r\n     * Loads reactions on placeholder\r\n     */\r\n    function loadReactions() {\r\n        $.ajax({\r\n            context: this,\r\n            cache: false,\r\n            data: {\r\n                action: 'da_reactions_load_buttons',\r\n                type: $(this).data('type'),\r\n                id: $(this).data('id'),\r\n                nonce: $(this).data('nonce') || DaReactions.nonce\r\n            },\r\n            method: 'post',\r\n            success: function (result) {\r\n                $(this).html(result);\r\n            },\r\n            url: DaReactions.ajax_url\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Utility function to format big numbers\r\n     *\r\n     * @param number\r\n     * @returns {string}\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    function numberFormatter(number) {\r\n        number = (typeof number !== 'undefined') ? +number : 0;\r\n        let si = [\r\n            {value: 1, symbol: \"\"},\r\n            {value: 1E3, symbol: \"K\"},\r\n            {value: 1E6, symbol: \"M\"},\r\n            {value: 1E9, symbol: \"G\"},\r\n            {value: 1E12, symbol: \"T\"},\r\n            {value: 1E15, symbol: \"P\"},\r\n            {value: 1E18, symbol: \"E\"},\r\n            {value: 1E21, symbol: \"Z\"},\r\n            {value: 1E23, symbol: \"Y\"}\r\n        ];\r\n        let rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\r\n        let i;\r\n        for (i = si.length - 1; i > 0; i--) {\r\n            if (number >= si[i].value) {\r\n                break;\r\n            }\r\n        }\r\n        return (number / si[i].value).toFixed(2).replace(rx, \"$1\").replace('.00', '') + si[i].symbol;\r\n    }\r\n\r\n    function alertWindow(message) {\r\n        const $background = $('<div>')\r\n            .attr('id', 'da-reactions-users-modal-background');\r\n\r\n        const $window = $('<div>')\r\n            .addClass('da-reactions-window');\r\n\r\n        const $paragraph = $('<p>')\r\n            .addClass('da-reactions-window-paragraph')\r\n            .text(message);\r\n\r\n        const $spacer = $('<div>')\r\n            .addClass('spacer');\r\n\r\n        const $closeButton = $('<span>')\r\n            .addClass('da-reactions-window-close')\r\n            .text(DaReactions.labels.modal_pagination_close)\r\n            .on('click', removeUsersModal);\r\n\r\n        $window.append($paragraph);\r\n        $window.append($spacer);\r\n        $window.append($closeButton);\r\n\r\n        $background.append($window);\r\n\r\n        $('body').prepend($background);\r\n    }\r\n\r\n    /**\r\n     * All actions are down here\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    $(document).ready(function () {\r\n\r\n        let $daReactionsDocument = $(document);\r\n\r\n        /**\r\n         * Enables Async load of reactions\r\n         *\r\n         * @since 1.0.0\r\n         */\r\n        _scrollSpot__WEBPACK_IMPORTED_MODULE_0__.vanillaScrollSpot.call($daReactionsDocument[0], loadReactions, \".da-reactions-container-async\");\r\n\r\n        /**\r\n         * Enables click on reaction button through generic selector\r\n         *\r\n         * @since 2.0.4\r\n         */\r\n        $daReactionsDocument.on('click', '.reaction img', clickedReaction);\r\n\r\n        /**\r\n         * Enables click on reaction count badge though .da-reactions-outer selector\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        if (DaReactions.display_detail_modal === 'on') {\r\n            $daReactionsDocument.on('click', '.da-reactions-outer .count', clickedCount);\r\n        }\r\n\r\n        /**\r\n         * Enables click on outer count badge for “reveal” template\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        if (DaReactions.display_detail_modal === 'on') {\r\n            $daReactionsDocument.on('click', '.da-reactions-outer .count', clickedCount);\r\n        }\r\n\r\n        /**\r\n         * Enables click on mobile toggle hamburger\r\n         *\r\n         * @since 2.0.4\r\n         */\r\n        $daReactionsDocument.on('click', '.reactions-toggle', clickedToggle);\r\n\r\n        /**\r\n         * Enables click on image to open widget in “reveal” template\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        $daReactionsDocument.on('click', '.da-reactions-reveal img', function () {\r\n            $(this).closest('.da-reactions-reveal').toggleClass('active');\r\n        });\r\n\r\n        /**\r\n         * Close .da-reactions-reveal on click outside\r\n         *\r\n         * @since 2.1.1\r\n         */\r\n        $daReactionsDocument.on('mouseup', function (event) {\r\n            let $currentActive = $('.da-reactions-reveal.active:eq(0)');\r\n            if (!$currentActive.is(event.target) && $currentActive.has(event.target).length === 0) {\r\n                $currentActive.removeClass('active');\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Show reaction users on mouseover\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        if (DaReactions.display_detail_tooltip === 'on') {\r\n            $daReactionsDocument.on('mouseover', '.da-reactions-container .count, .da-reactions-reveal .count', mouseOverCounter);\r\n        }\r\n\r\n        /**\r\n         * Move tooltip of users on mouseover\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        if (DaReactions.display_detail_tooltip === 'on') {\r\n            $daReactionsDocument.on('mousemove', mouseMoveCounter);\r\n        }\r\n\r\n        /**\r\n         * Hide reaction users on mouseout\r\n         *\r\n         * @since 3.0.0\r\n         */\r\n        if (DaReactions.display_detail_tooltip === 'on') {\r\n            $daReactionsDocument.on('mouseout', '.da-reactions-outer .count', mouseOutCounter);\r\n        }\r\n    });\r\n\r\n})(jQuery);\r\n\n\n//# sourceURL=webpack://da-reactions-assets/./src/js/public.es6?");

/***/ }),

/***/ "./src/js/scrollSpot.js":
/*!******************************!*\
  !*** ./src/js/scrollSpot.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   vanillaScrollSpot: () => (/* binding */ vanillaScrollSpot)\n/* harmony export */ });\nfunction vanillaScrollSpot(callback, selector) {\n    \"use strict\";\n\n    // Array to store elements to observe\n    let elementsArray = [];\n\n    // $(document).ready(); equivalent\n    function ready(fn) {\n        if (document.readyState !== 'loading') {\n            fn();\n        } else {\n            document.addEventListener('DOMContentLoaded', fn);\n        }\n    }\n\n    // Function to check if an element is visible in the viewport\n    function isElementVisible(element) {\n        const elementRect = element.getBoundingClientRect();\n        if (!elementRect) {\n            return false;\n        }\n\n        const elementTop = elementRect.top;\n        const elementBottom = elementTop + elementRect.height;\n        const viewportTop = window.scrollY;\n        const viewportBottom = viewportTop + window.innerHeight;\n\n        return elementBottom > viewportTop && elementTop < viewportBottom;\n    }\n\n    // Function to update the elements array to observe\n    function checkElements(parent = document) {\n        if (parent instanceof Node && !['#text', 'STYLE', 'SCRIPT'].includes(parent.nodeName)) {\n            const elementsToObserve = parent.querySelectorAll(selector);\n            if (elementsToObserve.length > 0) {\n                const newElements = Array.from(elementsToObserve);\n                elementsArray = [\n                    ...elementsArray,\n                    ...newElements\n                ].filter(element => element.dataset.processed !== 'true');\n            }\n        }\n    }\n\n    // Function to handle each observed element\n    function handleElement(element) {\n        // Check if the element has been processed\n        const processed = element.dataset.processed === 'true';\n\n        if (!processed) {\n            // If the element is visible, execute the callback and update the element's state\n            if (isElementVisible(element)) {\n                if (callback) {\n                    callback.call(element);\n                }\n                element.classList.add('in-viewport', 'spotted');\n                element.dataset.processed = 'true';\n            } else {\n                // If the element is not visible, remove the 'in-viewport' class\n                element.classList.remove('in-viewport');\n            }\n        }\n\n        // Use MutationObserver to detect changes in the DOM and update the elements array\n        const observer = new MutationObserver(mutationRecords => {\n            for (const mutationRecord of mutationRecords) {\n                for (const addedNode of mutationRecord.addedNodes) {\n                    checkElements(addedNode);\n                }\n            }\n        });\n        observer.observe(document, {childList: true, characterData: true, attributes: true, subtree: true});\n    }\n\n    // Function to handle resizing and scrolling events\n    function handleResizeScroll() {\n        // Iterate through each element and handle it\n        elementsArray.forEach((element) => {\n            handleElement(element);\n        });\n    }\n\n    // Add event listeners for resizing, scrolling, and DOMContentLoaded\n    window.addEventListener('resize', handleResizeScroll);\n    window.addEventListener('scroll', handleResizeScroll);\n    ready(() => {\n        checkElements();\n        handleResizeScroll();\n    });\n}\n\n\n//# sourceURL=webpack://da-reactions-assets/./src/js/scrollSpot.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/public.es6");
/******/ 	
/******/ })()
;